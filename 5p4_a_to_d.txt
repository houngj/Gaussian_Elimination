
Row-oriented Algorithm:
   	for(row = n-1; row >= 0; row--){
   		x[row] = b[row];
  		for(col=row+1; col<n; col++)
    	    	      x[row]-=A[row][col]*x[col];
  		x[row]/=A[row][row];
        }

Column-oriented Algorithm:
        for(row = 0; row < n; row++)
		x[row]=b[row];
        for(col = n-1; col >= 0; col--){
		x[col] != A[col][col];
		for(row = 0; row < col; row++)
			x[row] -= A[row][col]*x[col];
        } 

From section 5.5.1 - "OpenMP will only parallelize for loops that are in canonical form."

     • The variable index must have integer or pointer type (e.g., it can't be a float ).
     • The expressions start , end , and incr must have a compatible type. For example, if index is a pointer, then incr must have integer type.
     • The expressions start , end , and incr must not change during execution of the loop.
     • During execution of the loop, the variable index can only be modified by the “increment expression” in the for statement.


a. Determine whether the outer loop of the row-oriented algorithm can be parallelized

       Since the outer loops starting (n-1), ending (0), and increment (row--) variables 
   do not change, the index (row) variable is only modified by the increment variable, and 
   the format of the loop being one of canonical form, the outer loop of the row-oriented 
   algorithm can be parallelized.

b. Determine whether the inner loop of the row-oriented algorithm can be parallelized.

   	Since the inner loops starting (row+1), ending (n), and increment (col++) variables 
   do not change, the index (col) variable is only modified by the increment variable, and 
   the format of the loop being one of canonical form, the inner loop of the row-oriented 
   algorithm can be parallelized.

c. Determine whether the (second) outer loop of the column-oriented algorithm can be parallelized
   	
	Since the (second) outer loops starting (n-1), ending (0), and increment (col--) variables
   do not change, the index (col) variable is only modified by the increment variable, and 
   the format of the loop being one of canonical form, the (second) outter loop of the column-oriented 
   algorithm can be parallelized.

d. Determine whether the inner loop of the column-oriented algorithm can be parallelized.

   	Since the inner loops starting (0), ending (col), and increment (row++) variables
   do not change, the index (row) variable is only modified by the increment variable, and 
   the format of the loop being one of canonical form, the inner loop of the column-oriented 
   algorithm can be parallelized.
	
	     
